// Constant string literals that helps defining inline json shemas
export const STRING_TYPE = "string" as "string"
export const INTEGER_TYPE = "integer" as "integer"
export const NUMBER_TYPE = "number" as "number"
export const BOOLEAN_TYPE = "boolean" as "boolean"
export const NULL_TYPE = "null" as "null"
export const OBJECT_TYPE = "object" as "object"
export const ARRAY_TYPE = "array" as "array"
export const keys = <K extends keyof any>(v: K[]): K[] => v

/**
 * JsonSchemaTypeInterface is a sub part of actual JSONSchema interface
 * It contains all the properties that can affect the Typescript interface generated by SchemaBuilder
 */
export interface JsonSchemaTypeInterface {
    type?: "integer" | "number" | "string" | "boolean" | "object" | "array" | "null", properties?: any, items?: any, required?: string[], enum?: string[], oneOf?: JsonSchemaTypeInterface[]
}

/**
 * Type used to detect simple JSON Schema types integer, boolean, null, string, enum
 */
export type JsonSchemaSimpleTypes<T> =
    T extends { type: infer TYPE, enum?: infer ENUM } ?
    TYPE extends "integer" | "number" ? number :
    TYPE extends "boolean" ? boolean :
    TYPE extends "null" ? null :
    TYPE extends "string" ?
    ENUM extends Array<infer ENUM_VALUE> ? ENUM_VALUE : string :
    string :
    any;

/**
 * Types for a oneOf list
 */
export type JsonSchemaOneOfType<T> = { [P in keyof T]: T[P] extends JsonSchemaTypeInterface ? JsonSchemaType<T[P]> : never }[keyof T];

/**
 * Type of a json object
 */
export type JsonSchemaObjectType<T> =
    T extends { type: 'object', properties: infer PROPERTIES, required?: infer REQUIRED, additionalProperties?: infer AP } ?
    AP extends false ?
    JsonSchemaProperties<PROPERTIES, REQUIRED> :
    JsonSchemaProperties<PROPERTIES, REQUIRED> & { [k: string]: any } :
    any;

/**
 * Type of properties map for an 'object' type
 * JsonSchemaArray<T[P]>[number] is a workaround to avoid circular references
 */
export type JsonSchemaProperties<T, R> =
    R extends Array<infer KR> ?
    [KR] extends [keyof T] ? { [P in KR]: JsonSchemaArray<T[P]>[number] } & { [P in Exclude<keyof T, KR>]?: JsonSchemaArray<T[P]>[number] } :
    never /* A required property does not exist */ :
    { [P in keyof T]: JsonSchemaType<T[P]> } /* No required properties */;

/**
 * Type of a Jdone schema 'array' object
 */
export type JsonSchemaArrayType<T> =
    T extends { type: 'array', items?: infer ITEM } ?
    ITEM extends JsonSchemaTypeInterface ? JsonSchemaArray<ITEM> :
    any :
    any;

/**
 * Intermediate interface used to avoid circular references for arrays
 */
export interface JsonSchemaArray<T> extends Array<JsonSchemaType<T>> { }

/**
 * /!\ Experimental
 * Deduce the type that represents a JSON Schema from the Schema itself.
 * allOf and anyOf are not supported and will resolve to any
 */
export type JsonSchemaType<T> =
    T extends { type?: infer TYPE, oneOf?: infer ONE_OF, allOf?: infer ALL_OF, anyOf?: infer ANY_OF } ?
    ALL_OF extends any[] ? any :
    ANY_OF extends any[] ? any :
    ONE_OF extends any[] ? JsonSchemaOneOfType<ONE_OF> :
    TYPE extends "integer" | "number" | "boolean" | "null" | "string" ? JsonSchemaSimpleTypes<T> :
    TYPE extends "object" ? JsonSchemaObjectType<T> :
    TYPE extends "array" ? JsonSchemaArrayType<T> :
    any :
    any;